"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { logger: true, isDate: true, shouldMock: true, getHeader: true, toTitleCase: true, wrapAsync: true, methodToAction: true, toSnakeCase: true };exports.getHeader = getHeader;exports.toTitleCase = toTitleCase;exports.wrapAsync = wrapAsync;exports.toSnakeCase = toSnakeCase;exports.methodToAction = exports.shouldMock = exports.isDate = exports.logger = void 0;require("source-map-support/register");var _logger = _interopRequireDefault(require("../logger"));
var _lodash = require("lodash");
































































































































































var _auth = require("./auth");Object.keys(_auth).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;if (key in exports && exports[key] === _auth[key]) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _auth[key];} });});
var _env = require("./env");Object.keys(_env).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;if (key in exports && exports[key] === _env[key]) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _env[key];} });});
var _errors = require("./errors");Object.keys(_errors).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;if (key in exports && exports[key] === _errors[key]) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _errors[key];} });});function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}const logger = _logger.default.logger;exports.logger = logger;const isDate = (obj) => Object.prototype.toString.call(obj) === '[object Date]';exports.isDate = isDate;const shouldMock = (api) => {const MOCK = process.env.MOCK || '';return MOCK.indexOf(api) !== -1 || MOCK.indexOf('*') !== -1;};exports.shouldMock = shouldMock;function getHeader(request, name) {return request.headers[toTitleCase(name)] || request.headers[name.toLowerCase()] || request.headers[name.toUpperCase()];}function toTitleCase(str) {const smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|v.?|vs.?|via)$/i;const alphanumericPattern = /([A-Za-z0-9\u00C0-\u00FF])/;const wordSeparators = /([ :–—-])/;return str.split(wordSeparators).map((current, index, array) => {if (current.search(smallWords) > -1 && index !== 0 && index !== array.length - 1 && array[index - 3] !== ':' && array[index + 1] !== ':' && (array[index + 1] !== '-' || array[index - 1] === '-' && array[index + 1] === '-')) {return current.toLowerCase();}if (current.substr(1).search(/[A-Z]|\../) > -1) {return current;}if (array[index + 1] === ':' && array[index + 2] !== '') {return current;}return current.replace(alphanumericPattern, function m(match) {return match.toUpperCase();});}).join('');}function wrapAsync(fn) {return (req, res, next) => {fn(req, res, next).catch(next);};}const methodToAction = (req) => {const map = { DELETE: 'delete', PATCH: 'patch', POST: 'create', PUT: 'update' };return map[req.method];};exports.methodToAction = methodToAction;function toSnakeCase(obj, options = { ignoreTransformByKey: [], ignoreSnakeKey: [] }, pathNest = [], path = []) {if (typeof obj !== 'object') {return obj;} else if (obj === null) {return null;} else if (obj.hasOwnProperty('ID')) {delete obj.ID;}return (0, _lodash.chain)(obj).mapKeys((value, key) => {const shouldIgnore = (options.ignoreSnakeKey || []).findIndex((i) => i === key) !== -1;if (shouldIgnore) {return key;}return (0, _lodash.snakeCase)(key);}).mapValues((value, key) => {const parsedPath = [...path, key].join('.');const pathHandler = pathNest.find((p) => p[parsedPath]);if (value && typeof value === 'object' && !Array.isArray(value) && value.hasOwnProperty('ID')) {delete value.ID;}if (pathHandler) {const defaultValue = pathHandler[parsedPath];if (value === null) {return defaultValue;}return (0, _lodash.transform)(value, function transformFunction(current, v, k) {let val;if (Array.isArray(v) && v.length) {val = v[0];} else {val = v;}const [name, ...subValue] = (0, _lodash.snakeCase)(k).split('_');if (name === 'id') {return current;}let prop;if (!(current !== null && current !== void 0 && current.hasOwnProperty(name))) {prop = {};} else {prop = current[name];}if (subValue.length) {prop[subValue.join('_')] = val || null;}current[name] = prop;return current;}, {});}if (!(0, _lodash.isObject)(value) && !Array.isArray(value) || isDate(value) || (options.ignoreTransformByKey || []).includes(key)) {return value;}if (!Array.isArray(value)) {return toSnakeCase(value, options, pathNest, [...path, key]);}return value.map((v) => toSnakeCase(v, options, pathNest, [...path, key]));}).value();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,