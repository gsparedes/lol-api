"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.KnexConnection = void 0;var _bluebird = require("bluebird");require("source-map-support/register");require("moment");
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _knex = _interopRequireDefault(require("knex"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}





const getConfig = () => ({
  client: 'pg',
  searchPath: ['sequence', 'public'],
  connection: {
    bigNumberStrings: true,
    charset: 'utf8',
    database: process.env.FIS_RDS_DB || 'fis',
    host: process.env.FIS_RDS_HOSTNAME || 'localhost',
    password: process.env.FIS_RDS_PASSWORD || 'fispassword',
    port: parseInt(process.env.FIS_RDS_PORT || '5432', 10),
    user: process.env.FIS_RDS_USERNAME || 'fis',
    supportBigNumbers: true,
    connectTimeout: 90000 },

  acquireConnectionTimeout: 10000,
  pool: {
    acquireTimeoutMillis: parseInt(process.env.KNEX_POOL_ACQUIRE_TIMEOUT || '60000', 10),
    createTimeoutMillis: parseInt(process.env.KNEX_POOL_CREATE_TIMEOUT || '60000', 10),
    idleTimeoutMillis: parseInt(process.env.KNEX_POOL_IDLE_TIMEOUT || '10000', 10),
    reapIntervalMillis: parseInt(process.env.KNEX_POOL_REAP_INTERVAL_TIMEOUT || '10000', 10),
    createRetryIntervalMillis: parseInt(process.env.KNEX_POOL_CREATE_RETRY_INTERVAL || '200', 10),
    propagateCreateError: false,
    afterCreate(conn, done) {

      conn.query(`SET timezone="${_momentTimezone.default.tz.guess()}";`, (err) => {
        if (err) {

          done(err, conn);
        } else {
          done(null, conn);
        }
      });
      conn.query('SET autocommit=0;', (err) => {
        if (err) {

          done(err, conn);
        } else {
          done(null, conn);
        }
      });
    },
    max: parseInt(process.env.FIS_RDS_POOL_SIZE || '4', 10),
    min: 1 },

  asyncStackTraces: true });










const KnexConnection = () => new Promise(function () {var _ref = (0, _bluebird.coroutine)(function* (resolve, reject) {
    const config = getConfig();
    const db = (0, _knex.default)(config);
    return resolve(db);
  });return function (_x, _x2) {return _ref.apply(this, arguments);};}());exports.KnexConnection = KnexConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2NvbmZpZy50cyJdLCJuYW1lcyI6WyJnZXRDb25maWciLCJjbGllbnQiLCJzZWFyY2hQYXRoIiwiY29ubmVjdGlvbiIsImJpZ051bWJlclN0cmluZ3MiLCJjaGFyc2V0IiwiZGF0YWJhc2UiLCJwcm9jZXNzIiwiZW52IiwiRklTX1JEU19EQiIsImhvc3QiLCJGSVNfUkRTX0hPU1ROQU1FIiwicGFzc3dvcmQiLCJGSVNfUkRTX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiRklTX1JEU19QT1JUIiwidXNlciIsIkZJU19SRFNfVVNFUk5BTUUiLCJzdXBwb3J0QmlnTnVtYmVycyIsImNvbm5lY3RUaW1lb3V0IiwiYWNxdWlyZUNvbm5lY3Rpb25UaW1lb3V0IiwicG9vbCIsImFjcXVpcmVUaW1lb3V0TWlsbGlzIiwiS05FWF9QT09MX0FDUVVJUkVfVElNRU9VVCIsImNyZWF0ZVRpbWVvdXRNaWxsaXMiLCJLTkVYX1BPT0xfQ1JFQVRFX1RJTUVPVVQiLCJpZGxlVGltZW91dE1pbGxpcyIsIktORVhfUE9PTF9JRExFX1RJTUVPVVQiLCJyZWFwSW50ZXJ2YWxNaWxsaXMiLCJLTkVYX1BPT0xfUkVBUF9JTlRFUlZBTF9USU1FT1VUIiwiY3JlYXRlUmV0cnlJbnRlcnZhbE1pbGxpcyIsIktORVhfUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUwiLCJwcm9wYWdhdGVDcmVhdGVFcnJvciIsImFmdGVyQ3JlYXRlIiwiY29ubiIsImRvbmUiLCJxdWVyeSIsIm1vbWVudCIsInR6IiwiZ3Vlc3MiLCJlcnIiLCJtYXgiLCJGSVNfUkRTX1BPT0xfU0laRSIsIm1pbiIsImFzeW5jU3RhY2tUcmFjZXMiLCJLbmV4Q29ubmVjdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uZmlnIiwiZGIiXSwibWFwcGluZ3MiOiJzTEFBQTtBQUNBO0FBQ0Esb0Q7Ozs7OztBQU1BLE1BQU1BLFNBQVMsR0FBRyxPQUFlO0FBQy9CQyxFQUFB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QXVEQSxNQUFNQyxjQUFjLEdBQUcsTUFBcUIsSUFBSUMsT0FBSixrREFBa0IsV0FBT0MsT0FBUCxFQUFnQkMsTUFBaEIsRUFBMkI7QUFDdkYsVUFBTUMsTUFBTSxHQUFHbEQsU0FBUyxFQUF4QjtBQUNBLFVBQU1tRCxFQUFRLEdBQUcsbUJBQUtELE1BQUwsQ0FBakI7QUFDQSxXQUFPRixPQUFPLENBQUNHLEVBQUQsQ0FBZDtBQUNELEdBSjJDLHNFQUE1QyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdtb21lbnQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtdGltZXpvbmUnO1xuaW1wb3J0IEtuZXgsIHtDb25maWcsIFBvb2xDb25maWd9IGZyb20gJ2tuZXgnO1xuXG5pbnRlcmZhY2UgSUFmdGVyQ3JlYXRlQ29ubmVjdGlvbiB7XG4gIHF1ZXJ5KGNvbW1hbmQ6IHN0cmluZywgY2FsbGJhY2s6IChlcnI6IEVycm9yKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuY29uc3QgZ2V0Q29uZmlnID0gKCk6IENvbmZpZyA9PiAoe1xuICBjbGllbnQ6ICdwZycsXG4gIHNlYXJjaFBhdGg6IFsnc2VxdWVuY2UnLCAncHVibGljJ10sXG4gIGNvbm5lY3Rpb246IHtcbiAgICBiaWdOdW1iZXJTdHJpbmdzOiB0cnVlLFxuICAgIGNoYXJzZXQ6ICd1dGY4JyxcbiAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuRklTX1JEU19EQiB8fCAnZmlzJyxcbiAgICBob3N0OiBwcm9jZXNzLmVudi5GSVNfUkRTX0hPU1ROQU1FIHx8ICdsb2NhbGhvc3QnLFxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5GSVNfUkRTX1BBU1NXT1JEIHx8ICdmaXNwYXNzd29yZCcsXG4gICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuRklTX1JEU19QT1JUIHx8ICc1NDMyJywgMTApLFxuICAgIHVzZXI6IHByb2Nlc3MuZW52LkZJU19SRFNfVVNFUk5BTUUgfHwgJ2ZpcycsXG4gICAgc3VwcG9ydEJpZ051bWJlcnM6IHRydWUsXG4gICAgY29ubmVjdFRpbWVvdXQ6IDkwMDAwLFxuICB9LFxuICBhY3F1aXJlQ29ubmVjdGlvblRpbWVvdXQ6IDEwMDAwLFxuICBwb29sOiB7XG4gICAgYWNxdWlyZVRpbWVvdXRNaWxsaXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LktORVhfUE9PTF9BQ1FVSVJFX1RJTUVPVVQgfHwgJzYwMDAwJywgMTApLFxuICAgIGNyZWF0ZVRpbWVvdXRNaWxsaXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LktORVhfUE9PTF9DUkVBVEVfVElNRU9VVCB8fCAnNjAwMDAnLCAxMCksXG4gICAgaWRsZVRpbWVvdXRNaWxsaXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LktORVhfUE9PTF9JRExFX1RJTUVPVVQgfHwgJzEwMDAwJywgMTApLFxuICAgIHJlYXBJbnRlcnZhbE1pbGxpczogcGFyc2VJbnQocHJvY2Vzcy5lbnYuS05FWF9QT09MX1JFQVBfSU5URVJWQUxfVElNRU9VVCB8fCAnMTAwMDAnLCAxMCksXG4gICAgY3JlYXRlUmV0cnlJbnRlcnZhbE1pbGxpczogcGFyc2VJbnQocHJvY2Vzcy5lbnYuS05FWF9QT09MX0NSRUFURV9SRVRSWV9JTlRFUlZBTCB8fCAnMjAwJywgMTApLFxuICAgIHByb3BhZ2F0ZUNyZWF0ZUVycm9yOiBmYWxzZSxcbiAgICBhZnRlckNyZWF0ZShjb25uOiBJQWZ0ZXJDcmVhdGVDb25uZWN0aW9uLCBkb25lOiAoZXJyOiBFcnJvcnxudWxsLCBjb25uOiBJQWZ0ZXJDcmVhdGVDb25uZWN0aW9uKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAvLyBpbiB0aGlzIGV4YW1wbGUgd2UgdXNlIHBnIGRyaXZlcidzIGNvbm5lY3Rpb24gQVBJXG4gICAgICBjb25uLnF1ZXJ5KGBTRVQgdGltZXpvbmU9XCIkeyhtb21lbnQpLnR6Lmd1ZXNzKCl9XCI7YCwgKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIC8vIGZpcnN0IHF1ZXJ5IGZhaWxlZCwgcmV0dXJuIGVycm9yIGFuZCBkb24ndCB0cnkgdG8gbWFrZSBuZXh0IHF1ZXJ5XG4gICAgICAgICAgZG9uZShlcnIsIGNvbm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvbmUobnVsbCwgY29ubik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29ubi5xdWVyeSgnU0VUIGF1dG9jb21taXQ9MDsnLCAoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgLy8gZmlyc3QgcXVlcnkgZmFpbGVkLCByZXR1cm4gZXJyb3IgYW5kIGRvbid0IHRyeSB0byBtYWtlIG5leHQgcXVlcnlcbiAgICAgICAgICBkb25lKGVyciwgY29ubik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9uZShudWxsLCBjb25uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtYXg6IHBhcnNlSW50KHByb2Nlc3MuZW52LkZJU19SRFNfUE9PTF9TSVpFIHx8ICc0JywgMTApLFxuICAgIG1pbjogMSxcbiAgfSBhcyBQb29sQ29uZmlnLFxuICBhc3luY1N0YWNrVHJhY2VzOiB0cnVlLFxufSk7XG5cbmludGVyZmFjZSBJUGdEYlNlY3JldCB7XG4gIGhvc3Q6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xuICB1c2VybmFtZTogc3RyaW5nO1xuICBkYm5hbWU6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxuY29uc3QgS25leENvbm5lY3Rpb24gPSAoKTogUHJvbWlzZTxLbmV4PiA9PiBuZXcgUHJvbWlzZTxLbmV4Pihhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpO1xuICBjb25zdCBkYjogS25leCA9IEtuZXgoY29uZmlnKTtcbiAgcmV0dXJuIHJlc29sdmUoZGIpO1xufSk7XG5cbmV4cG9ydCB7S25leENvbm5lY3Rpb259O1xuIl19