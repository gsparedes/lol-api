service: lol-api

plugins:
  - serverless-offline
  - serverless-offline-watcher
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3
  serverless-offline-watcher:
    - path:
        - functions/*.js
        - lib/*.js
        - lib/**/*.js
      command: echo "JS files were modified!"
  cors:
    origins: [
      'https://localhost:3000',
    ]
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: true
  lolAPISecrets: ${ssm:/aws/reference/secretsmanager/lol-api}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'development'}
  timeout: 25
  environment:
    APP_NAME: ${self:service}
    SECRETS_ID: lol-api
    IS_LOCAL: ${opt:isLocal, env:IS_LOCAL, false}
    LAMBDA_AUTH_HEADER: ${opt:lambdaAuthHeader, self:custom.lolAPISecrets.lambdaAuthHeader, env:LAMBDA_AUTH_HEADER}
    LAMBDA_AUTH_HEADER_VALUE: ${opt:lambdaAuthHeaderValue, self:custom.lolAPISecrets.lambdaAuthHeaderValue, env:LAMBDA_AUTH_HEADER_VALUE}
    LOL_API_KEY: ${opt:lolApiKey, self:custom.lolAPISecrets.lolApiKey, env:LOL_API_KEY}
    LOL_API_ENDPOINT: ${opt:lolApiEndpoint, self:custom.lolAPISecrets.lolApiEndpoint, env:LOL_API_ENDPOINT}
    DATA_DRAGON_CDN: ${opt:dataDragonCdn, self:custom.lolAPISecrets.dataDragonCdn, env:DATA_DRAGON_CDN}
    CACHE_NAMESPACE: ${opt:cacheNamespace, self:custom.lolAPISecrets.cacheNamespace, env:CACHE_NAMESPACE}
    MONGODB_URI: ${opt:mongodbUri, self:custom.lolAPISecrets.mongodbUri, env:MONGODB_URI}
    MONGODB_DBNAME: ${opt:mongodbDbName, self:custom.lolAPISecrets.mongodbDbName, env:MONGODB_DBNAME}
    MONGODB_COLLECTION_NAME: ${opt:mongodbDbCollectionName, self:custom.lolAPISecrets.mongodbDbCollectionName,env:MONGODB_COLLECTION_NAME}
  apiGateway:
    restApiId: ${opt:restApiId, self:custom.lolAPISecrets.restApiId, null}
    restApiRootResourceId: ${opt:restApiRootResourceId, self:custom.lolAPISecrets.restApiRootResourceId, null}
  iam:
    role: ${opt:defaultRoleArn, self:custom.lolAPISecrets.defaultRoleArn, null}
  vpc:
    subnetIds:
      'Fn::Split':
        - ','
        - ${opt:defaultSubnetIds, self:custom.lolAPISecrets.defaultSubnetIds, ''}
    securityGroupIds:
      'Fn::Split':
        - ','
        - ${opt:defaultSecurityGroupIds, self:custom.lolAPISecrets.defaultSecurityGroupIds, ''}

functions:
  helloWorld:
    handler: functions/hello-world.handler
    events:
      - http:
          path: /hello
          method: get
          cors: ${self:custom.cors}
  getByRiotId:
    handler: functions/get-by-riot-id.handler
    events:
      - http:
          path: /by-riot-id
          method: get
          cors: ${self:custom.cors}
  getSummonerChampions:
    handler: functions/get-summoner-champions.handler
    events:
      - http:
          path: /get-summoner-champions
          method: get
          cors: ${self:custom.cors}
  getSummonerDetails:
    handler: functions/get-summoner-details.handler
    events:
      - http:
          path: /get-summoner-details
          method: get
          cors: ${self:custom.cors}
